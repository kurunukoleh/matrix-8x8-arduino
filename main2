
#include <Keypad.h>

int x_shift = 0 ;

const byte ROWS = 4;
const byte COLS = 4;

bool is_pic1 = false;
bool is_pic2 = false;

byte mainmas[8] = {
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000
};

//byte pic1[8] = {
  //0b00010000,
  //0b00110000,
  //0b01010000,
  //0b00010000,
  //0b00010000,
  //0b00010000,
  //0b00010000,
  //0b00111000
//};

//byte pic2[8] = {
  //0b00110000,
  //0b01001000,
  //0b10001000,
  //0b00001000,
  //0b00001000,
  //0b00010000,
  //0b00100000,
  //0b11111111
//};

                   
char MatrixKeyPad[ROWS][COLS] = {
      {'0','3','2','1'},
      {'C','6','5','4'},
      {'A','U','8','7'},
      {'R','D','L','9'}         };

byte rowPins[ROWS] = {6, 7, 8, 9}; 
byte colPins[COLS] = {5, 4, 3, 2}; 

void flash(byte frame[8] , int t){
    digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b01111111);
   shiftOut(12  , 11  , LSBFIRST  , frame[0] );
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);

   digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b10111111);
   shiftOut(12  , 11  , LSBFIRST  , frame[1]);
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);

   digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b11011111);
   shiftOut(12  , 11  , LSBFIRST  , frame[2]);
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);

   digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b11101111);
   shiftOut(12  , 11  , LSBFIRST  , frame[3]);
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);

   digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b11110111);
   shiftOut(12  , 11  , LSBFIRST  , frame[4]);
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);

   digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b11111011);
   shiftOut(12  , 11  , LSBFIRST  , frame[5]);
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);

   digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b11111101);
   shiftOut(12  , 11  , LSBFIRST  , frame[6]);
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);

   digitalWrite(10 , LOW);
   shiftOut(12  , 11  , LSBFIRST  , 0b11111110);
   shiftOut(12  , 11  , LSBFIRST  , frame[7]);
   //shiftOut(12  , 11  , LSBFIRST  , cn);
   digitalWrite(10 , HIGH);
   delay(t);
  }

//int point(int px ,  int py ){
 /// byte loc[8];
  //loc[px-1] = 0b0000001 << py;
  //return loc;
 //}

void pointmas(int px ,  int py , byte mas[8]){
   mas[px-1] += 0b00000001 << py -1;
 }

void clean(byte mas[8]){
  for(int i = 0 ; i < 8 ; i++){
  mas[i] = 0b00000000 ;
  }}

void rect( int x1 , int y1 , int x2 , int y2 , byte mas[8]){
  for(int i1 = x1 ; i1 <= x2 ; i1++){
    for(int i2 = y1 ; i2 <= y2 ; i2++){
       pointmas(i1 , i2 , mas);
      }
    } 
  }

void star(int x , int y , byte mas[8]){
  pointmas(1 + x , 1 + y , mas);
  pointmas(2 + x , 2 + y , mas);
  pointmas(3 + x , 3 + y , mas);
  pointmas(3 + x , 1 + y , mas);
  pointmas(1 + x , 3 + y , mas);
}

void one(int x , int y , byte mas[8]){
  pointmas(2 + x , 1 + y , mas);
  pointmas(2 + x , 2 + y , mas);
  pointmas(2 + x , 3 + y , mas);
  }

void two(int x , int y , byte mas[8]){
  pointmas(3 + x , 1 + y , mas);
  pointmas(2 + x , 1 + y , mas);
  pointmas(2 + x , 2 + y , mas);
  pointmas(2 + x , 3 + y , mas);
  pointmas(1 + x , 3 + y , mas);
  pointmas(3 + x , 3 + y , mas);
}

void wa(int x , int y , byte mas[8]){
  pointmas(2 + x , 1 + y , mas);
  pointmas(3 + x , 3 + y , mas);
  pointmas(1 + x , 3 + y , mas);
  pointmas(2 + x , 2 + y , mas);
  pointmas(3 + x , 2 + y , mas);
  pointmas(1 + x , 2 + y , mas);
  }

void wc(int x , int y , byte mas[8]){
  pointmas(3 + x , 3 + y , mas);
  pointmas(3 + x , 2 + y , mas);
  pointmas(3 + x , 1 + y , mas);
  pointmas(2 + x , 1 + y , mas);
  pointmas(2 + x , 3 + y , mas);
  }

void zero(int x , int y , byte mas[8]){
  pointmas(1 + x , 1 + y , mas);
  pointmas(1 + x , 2 + y , mas);
  pointmas(1 + x , 3 + y , mas);
  pointmas(2 + x , 1 + y , mas);
  pointmas(2 + x , 3 + y , mas);
  pointmas(3 + x , 1 + y , mas);
  pointmas(3 + x , 2 + y , mas);
  pointmas(3 + x , 3 + y , mas);
 
}

Keypad customKeypad = Keypad(makeKeymap(MatrixKeyPad), colPins, rowPins, COLS, ROWS);  

void setup(){

  Serial.begin(9600);
  for(int i2 = 10 ; i2 < 13 ; i2++){
        pinMode(i2 , OUTPUT);
      }
}
  
void loop(){
  // печатаем на серийном мониторе значения нажатой кнопки
  char customKey = customKeypad.getKey(); 
  
  if (customKey=='A'){}
  if (customKey=='C'){}
  if (customKey=='D'){}
  if (customKey=='E'){}
  if (customKey=='F'){}
  if (customKey=='G'){}
  if (customKey=='H'){}
  if (customKey=='I'){}
  if (customKey=='K'){}
  
  if(x_shift == 8){clean(mainmas);} 
  //if(is_pic1){flash(pic1 , 2);}
  //if(is_pic2){flash(pic2 , 2);}

  flash(mainmas , 3);

}
